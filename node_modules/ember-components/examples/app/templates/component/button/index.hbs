<h1>Button</h1>

<p>
A clickable component rendered as an html <i>button</i> tag that has a text and optionally may have an icon,
It is smart enough to avoid bioplate code required to change its state when buttons execute asynchronous calls.
</p>

<h4> Simplest form </h4>
<p>
{{em-button default="Click Me"}}
</p>

<h4> With an Icon </h4>
<p>
A button may also have an icon, if the <i>icon-classes</i> property is set on the <i>\{{em-button}}</i> tag then an extra <i>&lt;i&gt;</i> tag will be rendered with the given classes.
</p>

<p>
{{em-button icon-classes="fa fa-trash-o" default="With Icon"}}
</p>

<h4> Styles </h4>
<p>
You can of course add your own classes to the button to style it differently by setting the <i>class</i> property
</p>

<p>
{{em-button class="btn btn-danger" default="Delete"}}
</p>


<h4> Trigger Action </h4>

<p>
Simply bind an action controller to the button by setting the <i>on-click</i> property.
</p>

<p>
{{em-button on-click='onClick' default="Click Me!"}} {{message}}
</p>

<h4>Async</h4>

<p>
When a button executes an async call (a promise), it may need to:
<ol>
    <li>Disable button to avoid concurrent calls during the execution of an async call.</li>
    <li><i>Optionally</i> change button's title and/or its icon when the async call is executing, ended successfully or rejected.</li>
</ol>
</p>

<p>Simply bind the button to a promise and everything will happen</p>

<p>
{{em-button on-click='makeAsync' default='Happy Submit' icon-default='fa fa-trash-o' icon-executing='fa fa-spinner fa-spin' icon-resolved='fa fa-check' executing='Submitting' resolved='Completed' rejected="Failed"}}
</p>

<p>
{{em-button on-click='makeAsyncFailed' default='Sad Submit' executing='Submitting' resolved='Completed' rejected="Failed :/"}}
</p>
<br/><br/><br/>